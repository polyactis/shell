#!/usr/bin/env python
'''
Usage:	SchemaDatasetSetup.py -k SCHEMA -g ORGANISM -f DATASETS_FILE

Option:
	-k ..., --schema=...	Nothing related to database.
	-p ..., --gph_dir=...	~/gph_result(default)
	-d ..., --dataset_dir=...	~/datasets(default)
	-g ..., --organism=...	It's subdirectory in gph_dir and dataset_dir. Two-letter abbreviation.
	-f ..., --datasets_file=...	the file containing the dataset files
	-h, --help              show this help
	
Example:
	SchemaDatasetSetup.py -k mm_73 -g mm -f ~/datasets/mapping/mm_73_datasets

Description:
	a program to do dataset setup, which includes filename reordering,
		file batch moving...
'''

import sys, os, getopt, csv
from sets import Set
from file_batch_move import file_batch_move
from file_rename import rename

class SchemaDatasetSetup:
	"""
	05-13-05
		a program to do dataset setup, which includes filename reordering,
		file batch moving...
		
		depends on two modules, file_batch_move and rename
	"""
	def __init__(self, schema, gph_dir, dataset_dir, organism, datasets_file):
		self.schema = schema
		self.gph_dir = os.path.expanduser(gph_dir)
		self.dataset_dir = os.path.expanduser(dataset_dir)
		self.organism = organism
		self.datasets_file = os.path.expanduser(datasets_file)
		
		
	
	def datasets_move(self, srcdir, dstdir, list_file):
		"""
		08-30-05
			clean up dstdir first
		"""
		if os.path.isdir(dstdir):
			for fname in os.listdir(dstdir):
				fullpath = os.path.join(dstdir, fname)
				os.remove(fullpath)
		instance = file_batch_move(srcdir, dstdir, list_file, 0)	#0 means symbolic move
		instance.run()
		del instance
	
	def datasets_reorder_by_sort(self, dir, organism, datasets_mapping_file):
		sys.stderr.write("Reordering datasets in %s by sorting"%dir)
		prefix = '%s_dataset'%organism
		choice = 4
		instance = rename(dir, prefix, choice, datasets_mapping_file)
		instance.run()
		del instance
	
	def gph_datasets_file_reorder_by_mapping(self, dir, gph_mapping_restore_file):
		sys.stderr.write("Reordering gph files in %s by mapping"%gph_dir)
		prefix = ''
		choice = 1
		instance = rename(dir, prefix, choice, gph_mapping_restore_file)
		instance.run()
		del instance	#avoid the open file handlers
	
	def create_more_mapping_files(self, datasets_mapping_file, gph_mapping_file, gph_mapping_restore_file):
		sys.stderr.write("Creating gph mapping files...")
		f0 = open(datasets_mapping_file, 'r')
		reader = csv.reader(f0, delimiter='\t')
		f1 = open(gph_mapping_file, 'w')
		f2 = open(gph_mapping_restore_file, 'w')
		writer1 = csv.writer(f1, delimiter='\t')
		writer2 = csv.writer(f2, delimiter='\t')
		for row in reader:
			dataset_fname = row[0]
			dataset_fname_sorted = row[1]
			gph_dataset_fname = 'gph_%s'%dataset_fname
			gph_dataset_fname_sorted = 'gph_%s'%dataset_fname_sorted
			writer1.writerow([gph_dataset_fname, gph_dataset_fname_sorted])
			writer2.writerow([gph_dataset_fname_sorted, gph_dataset_fname])
		del writer1, writer2, reader
		f0.close()
		f1.close()
		f2.close()
		sys.stderr.write("Done.\n")
	
	def create_gph_datasets_file(self, datasets_file, gph_datasets_file):
		sys.stderr.write("Creating gph datasets_file...")
		f0 = open(datasets_file, 'r')	#closed later for create_more_mapping_files(), del reader is not enough.
		reader = csv.reader(f0, delimiter='\t')
		f1 = open(gph_datasets_file, 'w')
		writer1 = csv.writer(f1, delimiter='\t')
		for row in reader:
			dataset_fname = row[0]
			gph_dataset_fname = 'gph_%s'%dataset_fname
			writer1.writerow([gph_dataset_fname])
		del writer1, reader
		f0.close()
		f1.close()
		sys.stderr.write("Done.\n")
	
	
	def run(self):
		"""
		05-13-05
			--datasets_move()
			--datasets_reorder_by_sort()
			--create_gph_datasets_file()
			--create_more_mapping_files()
			--datasets_move()
			--gph_datasets_file_reorder_by_mapping()
		"""
		mapping_dir = os.path.dirname(self.datasets_file)
		gph_datasets_file = os.path.join(mapping_dir, '%s_gph_datasets'%self.schema)
			#the wanted gph files, generated by create_gph_datasets_file()
		datasets_mapping_file = os.path.join(mapping_dir, '%s_datasets_mapping'%self.schema)
			#the mapping between original dataset fnames and new ordered dataset fnames
			#generated by file_rename class
		gph_mapping_file = os.path.join(mapping_dir, '%s_gph_mapping'%self.schema)
			#the mapping between original gph fnames and new ordered gph fnames
			#generated by create_more_mapping_files()
		gph_mapping_restore_file = os.path.join(mapping_dir, '%s_gph_mapping_restore'%self.schema)
			#the mapping between new ordered gph fnames and original gph fnames, to keep gph files in the same order as datasets files
			#generated by create_more_mapping_files()
		
		#MOve the datasets
		srcdir = os.path.join(self.dataset_dir, organism)
		dstdir = os.path.join(self.dataset_dir, schema)
		self.datasets_move(srcdir, dstdir, self.datasets_file)
		#reorder the datasets
		self.datasets_reorder_by_sort(os.path.join(self.dataset_dir, schema), self.organism, datasets_mapping_file)
		#create additional files
		self.create_gph_datasets_file(self.datasets_file, gph_datasets_file)
		self.create_more_mapping_files(datasets_mapping_file, gph_mapping_file, gph_mapping_restore_file)
		#Move the gph files.
		srcdir = os.path.join(self.gph_dir, organism)
		dstdir = os.path.join(self.gph_dir, schema)
		self.datasets_move(srcdir, dstdir, gph_datasets_file)
		#reorder gph files
		self.gph_datasets_file_reorder_by_mapping(os.path.join(self.gph_dir, schema), gph_mapping_restore_file)

if __name__ == '__main__':
	if len(sys.argv) == 1:
		print __doc__
		sys.exit(2)
	try:
		opts, args = getopt.getopt(sys.argv[1:], "hk:p:d:g:f:", ["help", \
			"schema=", "gph_dir=", "dataset_dir=", "organism=", "datasets_file="])
	except:
		print __doc__
		sys.exit(2)
	
	schema = None
	gph_dir = '~/gph_result'
	dataset_dir = '~/datasets'
	organism = None
	datasets_file = None
	for opt, arg in opts:
		if opt in ("-h", "--help"):
			print __doc__
			sys.exit(2)
		elif opt in ("-k", "--schema"):
			schema = arg
		elif opt in ("-p", "--gph_dir"):
			gph_dir = arg
		elif opt in ("-d", "--dataset_dir"):
			dataset_dir = arg
		elif opt in ("-g", "--organism"):
			organism = arg
		elif opt in ("-f", "--datasets_file"):
			datasets_file = arg
			
	if schema and organism and datasets_file:
		instance = SchemaDatasetSetup(schema, gph_dir, dataset_dir, organism, datasets_file)
		instance.run()
	else:
		print __doc__
		sys.exit(2)
